// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: libs/shared/src/types/messages.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface OrderCreated {
  id: number;
  product: string;
  quantity: number;
  user: string;
}

export interface OrderProcessed {
  id: number;
  product: string;
  user: string;
  paymentStatus: string;
}

export interface PaymentSuccessful {
  id: number;
  product: string;
  user: string;
  paymentStatus: string;
}

function createBaseOrderCreated(): OrderCreated {
  return { id: 0, product: "", quantity: 0, user: "" };
}

export const OrderCreated: MessageFns<OrderCreated> = {
  encode(message: OrderCreated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.product !== "") {
      writer.uint32(18).string(message.product);
    }
    if (message.quantity !== 0) {
      writer.uint32(24).int32(message.quantity);
    }
    if (message.user !== "") {
      writer.uint32(34).string(message.user);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderCreated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.product = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.user = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderCreated {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      product: isSet(object.product) ? globalThis.String(object.product) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      user: isSet(object.user) ? globalThis.String(object.user) : "",
    };
  },

  toJSON(message: OrderCreated): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.product !== "") {
      obj.product = message.product;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderCreated>, I>>(base?: I): OrderCreated {
    return OrderCreated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderCreated>, I>>(object: I): OrderCreated {
    const message = createBaseOrderCreated();
    message.id = object.id ?? 0;
    message.product = object.product ?? "";
    message.quantity = object.quantity ?? 0;
    message.user = object.user ?? "";
    return message;
  },
};

function createBaseOrderProcessed(): OrderProcessed {
  return { id: 0, product: "", user: "", paymentStatus: "" };
}

export const OrderProcessed: MessageFns<OrderProcessed> = {
  encode(message: OrderProcessed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.product !== "") {
      writer.uint32(18).string(message.product);
    }
    if (message.user !== "") {
      writer.uint32(26).string(message.user);
    }
    if (message.paymentStatus !== "") {
      writer.uint32(34).string(message.paymentStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderProcessed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderProcessed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.product = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.user = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.paymentStatus = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderProcessed {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      product: isSet(object.product) ? globalThis.String(object.product) : "",
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      paymentStatus: isSet(object.paymentStatus) ? globalThis.String(object.paymentStatus) : "",
    };
  },

  toJSON(message: OrderProcessed): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.product !== "") {
      obj.product = message.product;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.paymentStatus !== "") {
      obj.paymentStatus = message.paymentStatus;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderProcessed>, I>>(base?: I): OrderProcessed {
    return OrderProcessed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderProcessed>, I>>(object: I): OrderProcessed {
    const message = createBaseOrderProcessed();
    message.id = object.id ?? 0;
    message.product = object.product ?? "";
    message.user = object.user ?? "";
    message.paymentStatus = object.paymentStatus ?? "";
    return message;
  },
};

function createBasePaymentSuccessful(): PaymentSuccessful {
  return { id: 0, product: "", user: "", paymentStatus: "" };
}

export const PaymentSuccessful: MessageFns<PaymentSuccessful> = {
  encode(message: PaymentSuccessful, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.product !== "") {
      writer.uint32(18).string(message.product);
    }
    if (message.user !== "") {
      writer.uint32(26).string(message.user);
    }
    if (message.paymentStatus !== "") {
      writer.uint32(34).string(message.paymentStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentSuccessful {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentSuccessful();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.product = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.user = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.paymentStatus = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentSuccessful {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      product: isSet(object.product) ? globalThis.String(object.product) : "",
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      paymentStatus: isSet(object.paymentStatus) ? globalThis.String(object.paymentStatus) : "",
    };
  },

  toJSON(message: PaymentSuccessful): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.product !== "") {
      obj.product = message.product;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.paymentStatus !== "") {
      obj.paymentStatus = message.paymentStatus;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentSuccessful>, I>>(base?: I): PaymentSuccessful {
    return PaymentSuccessful.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentSuccessful>, I>>(object: I): PaymentSuccessful {
    const message = createBasePaymentSuccessful();
    message.id = object.id ?? 0;
    message.product = object.product ?? "";
    message.user = object.user ?? "";
    message.paymentStatus = object.paymentStatus ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
