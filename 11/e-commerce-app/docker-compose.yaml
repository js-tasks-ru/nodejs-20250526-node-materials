version: '3.8'

services:
  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: "rabbitmq"
    hostname: "rabbitmq"
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices

  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP: api
    ports:
      - "3000:3000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      NODE_ENV: production
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
    networks:
      - microservices

  notifications:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP: notifications
    ports:
      - "3001:3000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      NODE_ENV: production
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
    networks:
      - microservices

  orders:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP: orders
    ports:
      - "3002:3000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      NODE_ENV: production
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
    networks:
      - microservices

  payments:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP: payments
    ports:
      - "3003:3000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      NODE_ENV: production
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
    networks:
      - microservices

networks:
  microservices:
    driver: bridge
